namespace GenerateSuppressions.CodeRules;

internal static class Sonar
{
    internal static List<CodeRule> Rules =
        [
            new CodeRule("S6096", "Extracting archives should not lead to zip slip vulnerabilities", "Sonar.Vulnerability"),
            new CodeRule("S5334", "Dynamic code execution should not be vulnerable to injection attacks", "Sonar.Vulnerability"),
            new CodeRule("S5146", "HTTP request redirections should not be open to forging attacks", "Sonar.Vulnerability"),
            new CodeRule("S5135", "Deserialization should not be vulnerable to injection attacks", "Sonar.Vulnerability"),
            new CodeRule("S5131", "Endpoints should not be vulnerable to reflected cross-site scripting (XSS) attacks", "Sonar.Vulnerability"),
            new CodeRule("S3649", "Database queries should not be vulnerable to injection attacks", "Sonar.Vulnerability"),
            new CodeRule("S2755", "XML parsers should not be vulnerable to XXE attacks", "Sonar.Vulnerability"),
            new CodeRule("S2115", "A secure password should be used when connecting to a database", "Sonar.Vulnerability"),
            new CodeRule("S2091", "XPath expressions should not be vulnerable to injection attacks", "Sonar.Vulnerability"),
            new CodeRule("S2083", "I/O function calls should not be vulnerable to path injection attacks", "Sonar.Vulnerability"),
            new CodeRule("S2078", "LDAP queries should not be vulnerable to injection attacks", "Sonar.Vulnerability"),
            new CodeRule("S2076", "OS commands should not be vulnerable to command injection attacks", "Sonar.Vulnerability"),
            new CodeRule("S4159", "Classes should implement their \\\"ExportAttribute\\\" interfaces", "Sonar.Bug"),
            new CodeRule("S3889", "\\\"Thread.Resume\\\" and \\\"Thread.Suspend\\\" should not be used", "Sonar.Bug"),
            new CodeRule("S3869", "\\\"SafeHandle.DangerousGetHandle\\\" should not be called", "Sonar.Bug"),
            new CodeRule("S3464", "Type inheritance should not be recursive", "Sonar.Bug"),
            new CodeRule("S2930", "\\\"IDisposables\\\" should be disposed", "Sonar.Bug"),
            new CodeRule("S2857", "SQL keywords should be delimited by whitespace", "Sonar.Bug"),
            new CodeRule("S2275", "Composite format strings should not lead to unexpected behavior at runtime", "Sonar.Bug"),
            new CodeRule("S2190", "Loops and recursions should not be infinite", "Sonar.Bug"),
            new CodeRule("S1048", "Finalizers should not throw exceptions", "Sonar.Bug"),
            new CodeRule("S2068", "Hard-coded credentials are security-sensitive", "Sonar.SecurityHotspot"),
            new CodeRule("S6424", "Interfaces for durable entities should satisfy the restrictions", "Sonar.CodeSmell"),
            new CodeRule("S6422", "Calls to \\\"async\\\" methods should not be blocking in Azure Functions", "Sonar.CodeSmell"),
            new CodeRule("S3877", "Exceptions should not be thrown from unexpected methods", "Sonar.CodeSmell"),
            new CodeRule("S3875", "\\\"operator==\\\" should not be overloaded on reference types", "Sonar.CodeSmell"),
            new CodeRule("S3443", "Type should not be examined on \\\"System.Type\\\" instances", "Sonar.CodeSmell"),
            new CodeRule("S3433", "Test method signatures should be correct", "Sonar.CodeSmell"),
            new CodeRule("S3427", "Method overloads with default parameter values should not overlap", "Sonar.CodeSmell"),
            new CodeRule("S3237", "\\\"value\\\" contextual keyword should be used", "Sonar.CodeSmell"),
            new CodeRule("S3060", "\\\"is\\\" should not be used with \\\"this\\\"", "Sonar.CodeSmell"),
            new CodeRule("S2970", "Assertions should be complete", "Sonar.CodeSmell"),
            new CodeRule("S2953", "Methods named \\\"Dispose\\\" should implement \\\"IDisposable.Dispose\\\"", "Sonar.CodeSmell"),
            new CodeRule("S2699", "Tests should include assertions", "Sonar.CodeSmell"),
            new CodeRule("S2437", "Unnecessary bit operations should not be performed", "Sonar.CodeSmell"),
            new CodeRule("S2368", "Public methods should not have multidimensional array parameters", "Sonar.CodeSmell"),
            new CodeRule("S2306", "\\\"async\\\" and \\\"await\\\" should not be used as identifiers", "Sonar.CodeSmell"),
            new CodeRule("S2187", "Test classes should contain at least one test case", "Sonar.CodeSmell"),
            new CodeRule("S2178", "Short-circuit logic should be used in boolean contexts", "Sonar.CodeSmell"),
            new CodeRule("S5659", "JWT should be signed and verified with strong cipher algorithms", "Sonar.Vulnerability"),
            new CodeRule("S5547", "Cipher algorithms should be robust", "Sonar.Vulnerability"),
            new CodeRule("S5542", "Encryption algorithms should be used with secure mode and padding scheme", "Sonar.Vulnerability"),
            new CodeRule("S5445", "Insecure temporary file creation methods should not be used", "Sonar.Vulnerability"),
            new CodeRule("S4830", "Server certificates should be verified during SSL/TLS connections", "Sonar.Vulnerability"),
            new CodeRule("S4433", "LDAP connections should be authenticated", "Sonar.Vulnerability"),
            new CodeRule("S4426", "Cryptographic keys should be robust", "Sonar.Vulnerability"),
            new CodeRule("S4423", "Weak SSL/TLS protocols should not be used", "Sonar.Vulnerability"),
            new CodeRule("S3329", "Cipher Block Chaining IVs should be unpredictable", "Sonar.Vulnerability"),
            new CodeRule("S2631", "Regular expressions should not be vulnerable to Denial of Service attacks", "Sonar.Vulnerability"),
            new CodeRule("S2053", "Hashes should include an unpredictable salt", "Sonar.Vulnerability"),
            new CodeRule("S5856", "Regular expressions should be syntactically valid", "Sonar.Bug"),
            new CodeRule("S4586", "Non-async \\\"Task/Task<T>\\\" methods should not return null", "Sonar.Bug"),
            new CodeRule("S4583", "Calls to delegate's method \\\"BeginInvoke\\\" should be paired with calls to \\\"EndInvoke\\\"", "Sonar.Bug"),
            new CodeRule("S4277", "\\\"Shared\\\" parts should not be created with \\\"new\\\"", "Sonar.Bug"),
            new CodeRule("S4275", "Getters and setters should access the expected fields", "Sonar.Bug"),
            new CodeRule("S3449", "Right operands of shift operators should be integers", "Sonar.Bug"),
            new CodeRule("S2551", "Shared resources should not be used for locking", "Sonar.Bug"),
            new CodeRule("S2222", "Locks should be released on all paths", "Sonar.Bug"),
            new CodeRule("S5443", "Using publicly writable directories is security-sensitive", "Sonar.SecurityHotspot"),
            new CodeRule("S5332", "Using clear-text protocols is security-sensitive", "Sonar.SecurityHotspot"),
            new CodeRule("S5042", "Expanding archive files without controlling resource consumption is security-sensitive", "Sonar.SecurityHotspot"),
            new CodeRule("S4792", "Configuring loggers is security-sensitive", "Sonar.SecurityHotspot"),
            new CodeRule("S4790", "Using weak hashing algorithms is security-sensitive", "Sonar.SecurityHotspot"),
            new CodeRule("S4502", "Disabling CSRF protections is security-sensitive", "Sonar.SecurityHotspot"),
            new CodeRule("S2257", "Using non-standard cryptographic algorithms is security-sensitive", "Sonar.SecurityHotspot"),
            new CodeRule("S2245", "Using pseudorandom number generators (PRNGs) is security-sensitive", "Sonar.SecurityHotspot"),
            new CodeRule("S927", "Parameter names should match base declaration and other partial definitions", "Sonar.CodeSmell"),
            new CodeRule("S5034", "\\\"ValueTask\\\" should be consumed correctly", "Sonar.CodeSmell"),
            new CodeRule("S4635", "Start index should be used instead of calling Substring", "Sonar.CodeSmell"),
            new CodeRule("S4524", "\\\"default\\\" clauses should be first or last", "Sonar.CodeSmell"),
            new CodeRule("S4487", "Unread \\\"private\\\" fields should be removed", "Sonar.CodeSmell"),
            new CodeRule("S4019", "Base class methods should not be hidden", "Sonar.CodeSmell"),
            new CodeRule("S4015", "Inherited member visibility should not be decreased", "Sonar.CodeSmell"),
            new CodeRule("S3998", "Threads should not lock on objects with weak identity", "Sonar.CodeSmell"),
            new CodeRule("S3973", "A conditionally executed single line should be denoted by indentation", "Sonar.CodeSmell"),
            new CodeRule("S3972", "Conditionals should start on new lines", "Sonar.CodeSmell"),
            new CodeRule("S3904", "Assemblies should have version information", "Sonar.CodeSmell"),
            new CodeRule("S3871", "Exception types should be \\\"public\\\"", "Sonar.CodeSmell"),
            new CodeRule("S3776", "Cognitive Complexity of methods should not be too high", "Sonar.CodeSmell"),
            new CodeRule("S3600", "\\\"params\\\" should not be introduced on overrides", "Sonar.CodeSmell"),
            new CodeRule("S3451", "\\\"[DefaultValue]\\\" should not be used when \\\"[DefaultParameterValue]\\\" is meant", "Sonar.CodeSmell"),
            new CodeRule("S3447", "\\\"[Optional]\\\" should not be used on \\\"ref\\\" or \\\"out\\\" parameters", "Sonar.CodeSmell"),
            new CodeRule("S3265", "Non-flags enums should not be used in bitwise operations", "Sonar.CodeSmell"),
            new CodeRule("S3218", "Inner class members should not shadow outer class \\\"static\\\" or type members", "Sonar.CodeSmell"),
            new CodeRule("S3217", "\\\"Explicit\\\" conversions of \\\"foreach\\\" loops should not be used", "Sonar.CodeSmell"),
            new CodeRule("S2696", "Instance members should not write to \\\"static\\\" fields", "Sonar.CodeSmell"),
            new CodeRule("S2692", "\\\"IndexOf\\\" checks should not be for positive numbers", "Sonar.CodeSmell"),
            new CodeRule("S2479", "Whitespace and control characters in string literals should be explicit", "Sonar.CodeSmell"),
            new CodeRule("S2365", "Properties should not make collection or array copies", "Sonar.CodeSmell"),
            new CodeRule("S2346", "Flags enumerations zero-value members should be named \\\"None\\\"", "Sonar.CodeSmell"),
            new CodeRule("S2291", "Overflow checking should not be disabled for \\\"Enumerable.Sum\\\"", "Sonar.CodeSmell"),
            new CodeRule("S2290", "Field-like events should not be virtual", "Sonar.CodeSmell"),
            new CodeRule("S2223", "Non-constant static fields should not be visible", "Sonar.CodeSmell"),
            new CodeRule("S2198", "Unnecessary mathematical comparisons should not be made", "Sonar.CodeSmell"),
            new CodeRule("S1944", "Invalid casts should be avoided", "Sonar.CodeSmell"),
            new CodeRule("S1699", "Constructors should only call non-overridable methods", "Sonar.CodeSmell"),
            new CodeRule("S1215", "\\\"GC.Collect\\\" should not be called", "Sonar.CodeSmell"),
            new CodeRule("S1186", "Methods should not be empty", "Sonar.CodeSmell"),
            new CodeRule("S1163", "Exceptions should not be thrown in finally blocks", "Sonar.CodeSmell"),
            new CodeRule("S1006", "Method overrides should not change parameter defaults", "Sonar.CodeSmell"),
            new CodeRule("S6641", "Connection strings should not be vulnerable to injections attacks", "Sonar.Vulnerability"),
            new CodeRule("S6639", "Memory allocations should not be vulnerable to Denial of Service attacks", "Sonar.Vulnerability"),
            new CodeRule("S6399", "XML operations should not be vulnerable to injection attacks", "Sonar.Vulnerability"),
            new CodeRule("S6287", "Applications should not create session cookies from untrusted input", "Sonar.Vulnerability"),
            new CodeRule("S6173", "Reflection should not be vulnerable to injection attacks", "Sonar.Vulnerability"),
            new CodeRule("S5773", "Types allowed to be deserialized should be restricted", "Sonar.Vulnerability"),
            new CodeRule("S5144", "Server-side requests should not be vulnerable to forging attacks", "Sonar.Vulnerability"),
            new CodeRule("S4211", "Members should not have conflicting transparency annotations", "Sonar.Vulnerability"),
            new CodeRule("S4428", "\\\"PartCreationPolicyAttribute\\\" should be used with \\\"ExportAttribute\\\"", "Sonar.Bug"),
            new CodeRule("S4260", "\\\"ConstructorArgument\\\" parameters should exist in constructors", "Sonar.Bug"),
            new CodeRule("S4210", "Windows Forms entry points should be marked with STAThread", "Sonar.Bug"),
            new CodeRule("S4143", "Collection elements should not be replaced unconditionally", "Sonar.Bug"),
            new CodeRule("S3984", "Exceptions should not be created without being thrown", "Sonar.Bug"),
            new CodeRule("S3981", "Collection sizes and array length comparisons should make sense", "Sonar.Bug"),
            new CodeRule("S3949", "Calculations should not overflow", "Sonar.Bug"),
            new CodeRule("S3927", "Serialization event handlers should be implemented correctly", "Sonar.Bug"),
            new CodeRule("S3926", "Deserialization methods should be provided for \\\"OptionalField\\\" members", "Sonar.Bug"),
            new CodeRule("S3923", "All branches in a conditional structure should not have exactly the same implementation", "Sonar.Bug"),
            new CodeRule("S3903", "Types should be defined in named namespaces", "Sonar.Bug"),
            new CodeRule("S3655", "Empty nullable value should not be accessed", "Sonar.Bug"),
            new CodeRule("S3610", "Nullable type comparison should not be redundant", "Sonar.Bug"),
            new CodeRule("S3603", "Methods with \\\"Pure\\\" attribute should return a value ", "Sonar.Bug"),
            new CodeRule("S3598", "One-way \\\"OperationContract\\\" methods should have \\\"void\\\" return type", "Sonar.Bug"),
            new CodeRule("S3466", "Optional parameters should be passed to \\\"base\\\" calls", "Sonar.Bug"),
            new CodeRule("S3453", "Classes should not have only \\\"private\\\" constructors", "Sonar.Bug"),
            new CodeRule("S3346", "Expressions used in \\\"Debug.Assert\\\" should not produce side effects", "Sonar.Bug"),
            new CodeRule("S3343", "Caller information parameters should come at the end of the parameter list", "Sonar.Bug"),
            new CodeRule("S3263", "Static fields should appear in the order they must be initialized ", "Sonar.Bug"),
            new CodeRule("S3249", "Classes directly extending \\\"object\\\" should not call \\\"base\\\" in \\\"GetHashCode\\\" or \\\"Equals\\\"", "Sonar.Bug"),
            new CodeRule("S3244", "Anonymous delegates should not be used to unsubscribe from Events", "Sonar.Bug"),
            new CodeRule("S3172", "Delegates should not be subtracted", "Sonar.Bug"),
            new CodeRule("S3168", "\\\"async\\\" methods should not return \\\"void\\\"", "Sonar.Bug"),
            new CodeRule("S3005", "\\\"ThreadStatic\\\" should not be used on non-static fields", "Sonar.Bug"),
            new CodeRule("S2997", "\\\"IDisposables\\\" created in a \\\"using\\\" statement should not be returned", "Sonar.Bug"),
            new CodeRule("S2996", "\\\"ThreadStatic\\\" fields should not be initialized", "Sonar.Bug"),
            new CodeRule("S2995", "\\\"Object.ReferenceEquals\\\" should not be used for value types", "Sonar.Bug"),
            new CodeRule("S2761", "Doubled prefix operators \\\"!!\\\" and \\\"~~\\\" should not be used", "Sonar.Bug"),
            new CodeRule("S2757", "Non-existent operators like \\\"=+\\\" should not be used", "Sonar.Bug"),
            new CodeRule("S2688", "\\\"NaN\\\" should not be used in comparisons", "Sonar.Bug"),
            new CodeRule("S2583", "Conditionally executed code should be reachable", "Sonar.Bug"),
            new CodeRule("S2445", "Blocks should be synchronized on read-only fields", "Sonar.Bug"),
            new CodeRule("S2259", "Null pointers should not be dereferenced", "Sonar.Bug"),
            new CodeRule("S2252", "For-loop conditions should be true at least once", "Sonar.Bug"),
            new CodeRule("S2251", "A \\\"for\\\" loop update clause should move the counter in the right direction", "Sonar.Bug"),
            new CodeRule("S2225", "\\\"ToString()\\\" method should not return null", "Sonar.Bug"),
            new CodeRule("S2201", "Methods without side effects should not have their return values ignored", "Sonar.Bug"),
            new CodeRule("S2123", "Values should not be uselessly incremented", "Sonar.Bug"),
            new CodeRule("S2114", "Collections should not be passed as arguments to their own methods", "Sonar.Bug"),
            new CodeRule("S1862", "Related \\\"if/else if\\\" statements should not have the same condition", "Sonar.Bug"),
            new CodeRule("S1848", "Objects should not be created to be dropped immediately without being used", "Sonar.Bug"),
            new CodeRule("S1764", "Identical expressions should not be used on both sides of operators", "Sonar.Bug"),
            new CodeRule("S1751", "Loops with at most one iteration should be refactored", "Sonar.Bug"),
            new CodeRule("S1656", "Variables should not be self-assigned", "Sonar.Bug"),
            new CodeRule("S6640", "Using unsafe code blocks is security-sensitive", "Sonar.SecurityHotspot"),
            new CodeRule("S6444", "Not specifying a timeout for regular expressions is security-sensitive", "Sonar.SecurityHotspot"),
            new CodeRule("S6350", "Constructing arguments of system commands from user input is security-sensitive", "Sonar.SecurityHotspot"),
            new CodeRule("S5766", "Deserializing objects without performing data validation is security-sensitive", "Sonar.SecurityHotspot"),
            new CodeRule("S5753", "Disabling ASP.NET \\\"Request Validation\\\" feature is security-sensitive", "Sonar.SecurityHotspot"),
            new CodeRule("S5693", "Allowing requests with excessive content length is security-sensitive", "Sonar.SecurityHotspot"),
            new CodeRule("S2612", "Setting loose file permissions is security-sensitive", "Sonar.SecurityHotspot"),
            new CodeRule("S2077", "Formatting SQL queries is security-sensitive", "Sonar.SecurityHotspot"),
            new CodeRule("S1313", "Using hardcoded IP addresses is security-sensitive", "Sonar.SecurityHotspot"),
            new CodeRule("S907", "\\\"goto\\\" statement should not be used", "Sonar.CodeSmell"),
            new CodeRule("S6580", "Use a format provider when parsing date and time", "Sonar.CodeSmell"),
            new CodeRule("S6575", "Use \\\"TimeZoneInfo.FindSystemTimeZoneById\\\" without converting the timezones with \\\"TimezoneConverter\\\"", "Sonar.CodeSmell"),
            new CodeRule("S6562", "Always set the \\\"DateTimeKind\\\" when creating new \\\"DateTime\\\" instances", "Sonar.CodeSmell"),
            new CodeRule("S6561", "Avoid using \\\"DateTime.Now\\\" for benchmarking or timing operations", "Sonar.CodeSmell"),
            new CodeRule("S6420", "Client instances should not be recreated on each Azure Function invocation", "Sonar.CodeSmell"),
            new CodeRule("S6419", "Azure Functions should be stateless", "Sonar.CodeSmell"),
            new CodeRule("S4581", "\\\"new Guid()\\\" should not be used", "Sonar.CodeSmell"),
            new CodeRule("S4545", "\\\"DebuggerDisplayAttribute\\\" strings should reference existing members", "Sonar.CodeSmell"),
            new CodeRule("S4456", "Parameter validation in yielding methods should be wrapped", "Sonar.CodeSmell"),
            new CodeRule("S4220", "Events should have proper arguments", "Sonar.CodeSmell"),
            new CodeRule("S4200", "Native methods should be wrapped", "Sonar.CodeSmell"),
            new CodeRule("S4144", "Methods should not have identical implementations", "Sonar.CodeSmell"),
            new CodeRule("S4070", "Non-flags enums should not be marked with \\\"FlagsAttribute\\\"", "Sonar.CodeSmell"),
            new CodeRule("S4035", "Classes implementing \\\"IEquatable<T>\\\" should be sealed", "Sonar.CodeSmell"),
            new CodeRule("S3971", "\\\"GC.SuppressFinalize\\\" should not be called", "Sonar.CodeSmell"),
            new CodeRule("S3966", "Objects should not be disposed more than once", "Sonar.CodeSmell"),
            new CodeRule("S3928", "Parameter names used into ArgumentException constructors should match an existing one ", "Sonar.CodeSmell"),
            new CodeRule("S3925", "\\\"ISerializable\\\" should be implemented correctly", "Sonar.CodeSmell"),
            new CodeRule("S3885", "\\\"Assembly.Load\\\" should be used", "Sonar.CodeSmell"),
            new CodeRule("S3881", "\\\"IDisposable\\\" should be implemented correctly", "Sonar.CodeSmell"),
            new CodeRule("S3597", "\\\"ServiceContract\\\" and \\\"OperationContract\\\" attributes should be used together", "Sonar.CodeSmell"),
            new CodeRule("S3457", "Composite format strings should be used correctly", "Sonar.CodeSmell"),
            new CodeRule("S3445", "Exceptions should not be explicitly rethrown", "Sonar.CodeSmell"),
            new CodeRule("S3442", "\\\"abstract\\\" classes should not have \\\"public\\\" constructors", "Sonar.CodeSmell"),
            new CodeRule("S3415", "Assertion arguments should be passed in the correct order", "Sonar.CodeSmell"),
            new CodeRule("S3358", "Ternary operators should not be nested", "Sonar.CodeSmell"),
            new CodeRule("S3264", "Events should be invoked", "Sonar.CodeSmell"),
            new CodeRule("S3262", "\\\"params\\\" should be used on overrides", "Sonar.CodeSmell"),
            new CodeRule("S3246", "Generic type parameters should be co/contravariant when possible", "Sonar.CodeSmell"),
            new CodeRule("S3169", "Multiple \\\"OrderBy\\\" calls should not be used", "Sonar.CodeSmell"),
            new CodeRule("S3063", "\\\"StringBuilder\\\" data should be used", "Sonar.CodeSmell"),
            new CodeRule("S3011", "Reflection should not be used to increase accessibility of classes, methods, or fields", "Sonar.CodeSmell"),
            new CodeRule("S3010", "Static fields should not be updated in constructors", "Sonar.CodeSmell"),
            new CodeRule("S2971", "LINQ expressions should be simplified", "Sonar.CodeSmell"),
            new CodeRule("S2933", "Fields that are only assigned in the constructor should be \\\"readonly\\\"", "Sonar.CodeSmell"),
            new CodeRule("S2925", "\\\"Thread.Sleep\\\" should not be used in tests", "Sonar.CodeSmell"),
            new CodeRule("S2743", "Static fields should not be used in generic types", "Sonar.CodeSmell"),
            new CodeRule("S2681", "Multiline blocks should be enclosed in curly braces", "Sonar.CodeSmell"),
            new CodeRule("S2589", "Boolean expressions should not be gratuitous", "Sonar.CodeSmell"),
            new CodeRule("S2436", "Types and methods should not have too many generic parameters", "Sonar.CodeSmell"),
            new CodeRule("S2376", "Write-only properties should not be used", "Sonar.CodeSmell"),
            new CodeRule("S2372", "Exceptions should not be thrown from property getters", "Sonar.CodeSmell"),
            new CodeRule("S2326", "Unused type parameters should be removed", "Sonar.CodeSmell"),
            new CodeRule("S2234", "Arguments should be passed in the same order as the method parameters", "Sonar.CodeSmell"),
            new CodeRule("S2166", "Classes named like \\\"Exception\\\" should extend \\\"Exception\\\" or a subclass", "Sonar.CodeSmell"),
            new CodeRule("S1871", "Two branches in a conditional structure should not have exactly the same implementation", "Sonar.CodeSmell"),
            new CodeRule("S1854", "Unused assignments should be removed", "Sonar.CodeSmell"),
            new CodeRule("S1607", "Tests should not be ignored", "Sonar.CodeSmell"),
            new CodeRule("S1479", "\\\"switch\\\" statements should not have too many \\\"case\\\" clauses", "Sonar.CodeSmell"),
            new CodeRule("S125", "Sections of code should not be commented out", "Sonar.CodeSmell"),
            new CodeRule("S1172", "Unused method parameters should be removed", "Sonar.CodeSmell"),
            new CodeRule("S1168", "Empty arrays and collections should be returned instead of null", "Sonar.CodeSmell"),
            new CodeRule("S1144", "Unused private types or members should be removed", "Sonar.CodeSmell"),
            new CodeRule("S1134", "Track uses of \\\"FIXME\\\" tags", "Sonar.CodeSmell"),
            new CodeRule("S1123", "\\\"Obsolete\\\" attributes should include explanations", "Sonar.CodeSmell"),
            new CodeRule("S1121", "Assignments should not be made from within sub-expressions", "Sonar.CodeSmell"),
            new CodeRule("S112", "General or reserved exceptions should never be thrown", "Sonar.CodeSmell"),
            new CodeRule("S1118", "Utility classes should not have public constructors", "Sonar.CodeSmell"),
            new CodeRule("S1117", "Local variables should not shadow class fields or properties", "Sonar.CodeSmell"),
            new CodeRule("S1110", "Redundant pairs of parentheses should be removed", "Sonar.CodeSmell"),
            new CodeRule("S110", "Inheritance tree of classes should not be too deep", "Sonar.CodeSmell"),
            new CodeRule("S108", "Nested blocks of code should not be left empty", "Sonar.CodeSmell"),
            new CodeRule("S107", "Methods should not have too many parameters", "Sonar.CodeSmell"),
            new CodeRule("S1066", "Mergeable \\\"if\\\" statements should be combined", "Sonar.CodeSmell"),
            new CodeRule("S5883", "OS commands should not be vulnerable to argument injection attacks", "Sonar.Vulnerability"),
            new CodeRule("S5145", "Logging should not be vulnerable to injection attacks", "Sonar.Vulnerability"),
            new CodeRule("S4158", "Empty collections should not be accessed or iterated", "Sonar.Bug"),
            new CodeRule("S3887", "Mutable, non-private fields should not be \\\"readonly\\\"", "Sonar.Bug"),
            new CodeRule("S3456", "\\\"string.ToCharArray()\\\" and \\\"ReadOnlySpan<T>.ToArray()\\\" should not be called redundantly", "Sonar.Bug"),
            new CodeRule("S3397", "\\\"base.Equals\\\" should not be used to check for reference equality in \\\"Equals\\\" if \\\"base\\\" is not \\\"object\\\"", "Sonar.Bug"),
            new CodeRule("S3363", "Date and time should not be used as a type for primary keys", "Sonar.Bug"),
            new CodeRule("S2934", "Property assignments should not be made for \\\"readonly\\\" fields not constrained to reference types", "Sonar.Bug"),
            new CodeRule("S2345", "Flags enumerations should explicitly initialize all their members", "Sonar.Bug"),
            new CodeRule("S2328", "\\\"GetHashCode\\\" should not reference mutable fields", "Sonar.Bug"),
            new CodeRule("S2184", "Results of integer division should not be assigned to floating point variables", "Sonar.Bug"),
            new CodeRule("S2183", "Integral numbers should not be shifted by zero or more than their number of bits-1", "Sonar.Bug"),
            new CodeRule("S1206", "\\\"Equals(Object)\\\" and \\\"GetHashCode()\\\" should be overridden in pairs", "Sonar.Bug"),
            new CodeRule("S5122", "Having a permissive Cross-Origin Resource Sharing policy is security-sensitive", "Sonar.SecurityHotspot"),
            new CodeRule("S4507", "Delivering code in production with debug features activated is security-sensitive", "Sonar.SecurityHotspot"),
            new CodeRule("S4036", "Searching OS commands in PATH is security-sensitive", "Sonar.SecurityHotspot"),
            new CodeRule("S3330", "Creating cookies without the \\\"HttpOnly\\\" flag is security-sensitive", "Sonar.SecurityHotspot"),
            new CodeRule("S2092", "Creating cookies without the \\\"secure\\\" flag is security-sensitive", "Sonar.SecurityHotspot"),
            new CodeRule("S818", "Literal suffixes should be upper case", "Sonar.CodeSmell"),
            new CodeRule("S6618", "\\\"string.Create\\\" should be used instead of \\\"FormattableString\\\"", "Sonar.CodeSmell"),
            new CodeRule("S6617", "\\\"Contains\\\" should be used instead of \\\"Any\\\" for simple equality checks", "Sonar.CodeSmell"),
            new CodeRule("S6613", "\\\"First\\\" and \\\"Last\\\" properties of \\\"LinkedList\\\" should be used instead of the \\\"First()\\\" and \\\"Last()\\\" extension methods", "Sonar.CodeSmell"),
            new CodeRule("S6612", "The lambda parameter should be used instead of capturing arguments in \\\"ConcurrentDictionary\\\" methods", "Sonar.CodeSmell"),
            new CodeRule("S6610", "\\\"StartsWith\\\" and \\\"EndsWith\\\" overloads that take a \\\"char\\\" should be used instead of the ones that take a \\\"string\\\"", "Sonar.CodeSmell"),
            new CodeRule("S6609", "\\\"Min/Max\\\" properties of \\\"Set\\\" types should be used instead of the \\\"Enumerable\\\" extension methods", "Sonar.CodeSmell"),
            new CodeRule("S6608", "Prefer indexing instead of \\\"Enumerable\\\" methods on types implementing \\\"IList\\\"", "Sonar.CodeSmell"),
            new CodeRule("S6607", "The collection should be filtered before sorting by using \\\"Where\\\" before \\\"OrderBy\\\"", "Sonar.CodeSmell"),
            new CodeRule("S6605", "Collection-specific \\\"Exists\\\" method should be used instead of the \\\"Any\\\" extension", "Sonar.CodeSmell"),
            new CodeRule("S6603", "The collection-specific \\\"TrueForAll\\\" method should be used instead of the \\\"All\\\" extension", "Sonar.CodeSmell"),
            new CodeRule("S6602", "\\\"Find\\\" method should be used instead of the \\\"FirstOrDefault\\\" extension", "Sonar.CodeSmell"),
            new CodeRule("S6588", "Use the \\\"UnixEpoch\\\" field instead of creating \\\"DateTime\\\" instances that point to the beginning of the Unix epoch", "Sonar.CodeSmell"),
            new CodeRule("S4663", "Comments should not be empty", "Sonar.CodeSmell"),
            new CodeRule("S4201", "Null checks should not be used with \\\"is\\\"", "Sonar.CodeSmell"),
            new CodeRule("S4136", "Method overloads should be grouped together", "Sonar.CodeSmell"),
            new CodeRule("S4061", "\\\"params\\\" should be used instead of \\\"varargs\\\"", "Sonar.CodeSmell"),
            new CodeRule("S3963", "\\\"static\\\" fields should be initialized inline", "Sonar.CodeSmell"),
            new CodeRule("S3897", "Classes that provide \\\"Equals(<T>)\\\" should implement \\\"IEquatable<T>\\\"", "Sonar.CodeSmell"),
            new CodeRule("S3878", "Arrays should not be created for params parameters", "Sonar.CodeSmell"),
            new CodeRule("S3626", "Jump statements should not be redundant", "Sonar.CodeSmell"),
            new CodeRule("S3604", "Member initializer values should not be redundant", "Sonar.CodeSmell"),
            new CodeRule("S3459", "Unassigned members should be removed", "Sonar.CodeSmell"),
            new CodeRule("S3458", "Empty \\\"case\\\" clauses that fall through to the \\\"default\\\" should be omitted", "Sonar.CodeSmell"),
            new CodeRule("S3450", "Parameters with \\\"[DefaultParameterValue]\\\" attributes should also be marked \\\"[Optional]\\\"", "Sonar.CodeSmell"),
            new CodeRule("S3444", "Interfaces should not simply inherit from base interfaces with colliding members", "Sonar.CodeSmell"),
            new CodeRule("S3440", "Variables should not be checked against the values they're about to be assigned", "Sonar.CodeSmell"),
            new CodeRule("S3400", "Methods should not return constants", "Sonar.CodeSmell"),
            new CodeRule("S3398", "\\\"private\\\" methods called only by inner classes should be moved to those classes", "Sonar.CodeSmell"),
            new CodeRule("S3376", "Attribute, EventArgs, and Exception type names should end with the type being extended", "Sonar.CodeSmell"),
            new CodeRule("S3267", "Loops should be simplified with \\\"LINQ\\\" expressions", "Sonar.CodeSmell"),
            new CodeRule("S3261", "Namespaces should not be empty", "Sonar.CodeSmell"),
            new CodeRule("S3260", "Non-derived \\\"private\\\" classes and records should be \\\"sealed\\\"", "Sonar.CodeSmell"),
            new CodeRule("S3256", "\\\"string.IsNullOrEmpty\\\" should be used", "Sonar.CodeSmell"),
            new CodeRule("S3251", "Implementations should be provided for \\\"partial\\\" methods", "Sonar.CodeSmell"),
            new CodeRule("S3247", "Duplicate casts should not be made", "Sonar.CodeSmell"),
            new CodeRule("S3241", "Methods should not return values that are never used", "Sonar.CodeSmell"),
            new CodeRule("S3236", "Caller information arguments should not be provided explicitly", "Sonar.CodeSmell"),
            new CodeRule("S3220", "Method calls should not resolve ambiguously to overloads with \\\"params\\\"", "Sonar.CodeSmell"),
            new CodeRule("S2737", "\\\"catch\\\" clauses should do more than rethrow", "Sonar.CodeSmell"),
            new CodeRule("S2486", "Generic exceptions should not be ignored", "Sonar.CodeSmell"),
            new CodeRule("S2386", "Mutable fields should not be \\\"public static\\\"", "Sonar.CodeSmell"),
            new CodeRule("S2344", "Enumeration type names should not have \\\"Flags\\\" or \\\"Enum\\\" suffixes", "Sonar.CodeSmell"),
            new CodeRule("S2342", "Enumeration types should comply with a naming convention", "Sonar.CodeSmell"),
            new CodeRule("S2292", "Trivial properties should be auto-implemented", "Sonar.CodeSmell"),
            new CodeRule("S2219", "Runtime type checking should be simplified", "Sonar.CodeSmell"),
            new CodeRule("S2094", "Classes should not be empty", "Sonar.CodeSmell"),
            new CodeRule("S1940", "Boolean checks should not be inverted", "Sonar.CodeSmell"),
            new CodeRule("S1939", "Inheritance list should not be redundant", "Sonar.CodeSmell"),
            new CodeRule("S1905", "Redundant casts should not be used", "Sonar.CodeSmell"),
            new CodeRule("S1643", "Strings should not be concatenated using '+' in a loop", "Sonar.CodeSmell"),
            new CodeRule("S1481", "Unused local variables should be removed", "Sonar.CodeSmell"),
            new CodeRule("S1450", "Private fields only used as local variables in methods should become local variables", "Sonar.CodeSmell"),
            new CodeRule("S1264", "A \\\"while\\\" loop should be used instead of a \\\"for\\\" loop", "Sonar.CodeSmell"),
            new CodeRule("S1210", "\\\"Equals\\\" and the comparison operators should be overridden when implementing \\\"IComparable\\\"", "Sonar.CodeSmell"),
            new CodeRule("S1199", "Nested code blocks should not be used", "Sonar.CodeSmell"),
            new CodeRule("S1185", "Overriding members should do more than simply call the same member in the base class", "Sonar.CodeSmell"),
            new CodeRule("S1155", "\\\"Any()\\\" should be used to test for emptiness", "Sonar.CodeSmell"),
            new CodeRule("S1125", "Boolean literals should not be redundant", "Sonar.CodeSmell"),
            new CodeRule("S1116", "Empty statements should be removed", "Sonar.CodeSmell"),
            new CodeRule("S1104", "Fields should not have public accessibility", "Sonar.CodeSmell"),
            new CodeRule("S1075", "URIs should not be hardcoded", "Sonar.CodeSmell"),
            new CodeRule("S101", "Types should be named in PascalCase", "Sonar.CodeSmell"),
            new CodeRule("S1135", "Track uses of \\\"TODO\\\" tags", "Sonar.CodeSmell"),
            new CodeRule("S1133", "Deprecated code should be removed", "Sonar.CodeSmell"),
            new CodeRule("S3884", "\\\"CoSetProxyBlanket\\\" and \\\"CoInitializeSecurity\\\" should not be used", "Sonar.Vulnerability"),
            new CodeRule("S2931", "Classes with \\\"IDisposable\\\" members should implement \\\"IDisposable\\\"", "Sonar.Bug"),
            new CodeRule("S4462", "Calls to \\\"async\\\" methods should not be blocking", "Sonar.CodeSmell"),
            new CodeRule("S2387", "Child class fields should not shadow parent class fields", "Sonar.CodeSmell"),
            new CodeRule("S1451", "Track lack of copyright and license headers", "Sonar.CodeSmell"),
            new CodeRule("S1147", "Exit methods should not be called", "Sonar.CodeSmell"),
            new CodeRule("S2952", "Classes should \\\"Dispose\\\" of members from the classes' own \\\"Dispose\\\" methods", "Sonar.Bug"),
            new CodeRule("S4039", "Interface methods should be callable by derived types", "Sonar.CodeSmell"),
            new CodeRule("S4025", "Child class fields should not differ from parent class fields only by capitalization", "Sonar.CodeSmell"),
            new CodeRule("S4000", "Pointers to unmanaged memory should not be visible", "Sonar.CodeSmell"),
            new CodeRule("S3937", "Number patterns should be regular", "Sonar.CodeSmell"),
            new CodeRule("S3874", "\\\"out\\\" and \\\"ref\\\" parameters should not be used", "Sonar.CodeSmell"),
            new CodeRule("S3353", "Unchanged variables should be marked as \\\"const\\\"", "Sonar.CodeSmell"),
            new CodeRule("S3216", "\\\"ConfigureAwait(false)\\\" should be used", "Sonar.CodeSmell"),
            new CodeRule("S3215", "\\\"interface\\\" instances should not be cast to concrete types", "Sonar.CodeSmell"),
            new CodeRule("S2701", "Literal boolean values should not be used in assertions", "Sonar.CodeSmell"),
            new CodeRule("S2360", "Optional parameters should not be used", "Sonar.CodeSmell"),
            new CodeRule("S2339", "Public constant members should not be used", "Sonar.CodeSmell"),
            new CodeRule("S2330", "Array covariance should not be used", "Sonar.CodeSmell"),
            new CodeRule("S2302", "\\\"nameof\\\" should be used", "Sonar.CodeSmell"),
            new CodeRule("S2197", "Modulus results should not be checked for direct equality", "Sonar.CodeSmell"),
            new CodeRule("S1994", "\\\"for\\\" loop increment clauses should modify the loops' counters", "Sonar.CodeSmell"),
            new CodeRule("S1821", "\\\"switch\\\" statements should not be nested", "Sonar.CodeSmell"),
            new CodeRule("S1541", "Methods and properties should not be too complex", "Sonar.CodeSmell"),
            new CodeRule("S134", "Control flow statements \\\"if\\\", \\\"switch\\\", \\\"for\\\", \\\"foreach\\\", \\\"while\\\", \\\"do\\\"  and \\\"try\\\" should not be nested too deeply", "Sonar.CodeSmell"),
            new CodeRule("S131", "\\\"switch/Select\\\" statements should contain a \\\"default/Case Else\\\" clauses", "Sonar.CodeSmell"),
            new CodeRule("S126", "\\\"if ... else if\\\" constructs should end with \\\"else\\\" clauses", "Sonar.CodeSmell"),
            new CodeRule("S121", "Control structures should use curly braces", "Sonar.CodeSmell"),
            new CodeRule("S1067", "Expressions should not be too complex", "Sonar.CodeSmell"),
            new CodeRule("S4212", "Serialization constructors should be secured", "Sonar.Vulnerability"),
            new CodeRule("S6507", "Blocks should not be synchronized on local variables", "Sonar.Bug"),
            new CodeRule("S1244", "Floating point numbers should not be tested for equality", "Sonar.Bug"),
            new CodeRule("S881", "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression", "Sonar.CodeSmell"),
            new CodeRule("S6566", "Use \\\"DateTimeOffset\\\" instead of \\\"DateTime\\\"", "Sonar.CodeSmell"),
            new CodeRule("S6563", "Use UTC when recording DateTime instants", "Sonar.CodeSmell"),
            new CodeRule("S6423", "Azure Functions should log all failures", "Sonar.CodeSmell"),
            new CodeRule("S6421", "Azure Functions should use Structured Error Handling", "Sonar.CodeSmell"),
            new CodeRule("S6354", "Use a testable date/time provider", "Sonar.CodeSmell"),
            new CodeRule("S4457", "Parameter validation in \\\"async\\\"/\\\"await\\\" methods should be wrapped", "Sonar.CodeSmell"),
            new CodeRule("S4214", "\\\"P/Invoke\\\" methods should not be visible", "Sonar.CodeSmell"),
            new CodeRule("S4059", "Property names should not match get methods", "Sonar.CodeSmell"),
            new CodeRule("S4057", "Locales should be set for data types", "Sonar.CodeSmell"),
            new CodeRule("S4055", "Literals should not be passed as localized parameters", "Sonar.CodeSmell"),
            new CodeRule("S4050", "Operators should be overloaded consistently", "Sonar.CodeSmell"),
            new CodeRule("S4017", "Method signatures should not contain nested generic types", "Sonar.CodeSmell"),
            new CodeRule("S4016", "Enumeration members should not be named \\\"Reserved\\\"", "Sonar.CodeSmell"),
            new CodeRule("S4005", "\\\"System.Uri\\\" arguments should be used instead of strings", "Sonar.CodeSmell"),
            new CodeRule("S4004", "Collection properties should be readonly", "Sonar.CodeSmell"),
            new CodeRule("S4002", "Disposable types should declare finalizers", "Sonar.CodeSmell"),
            new CodeRule("S3997", "String URI overloads should call \\\"System.Uri\\\" overloads", "Sonar.CodeSmell"),
            new CodeRule("S3996", "URI properties should not be strings", "Sonar.CodeSmell"),
            new CodeRule("S3995", "URI return values should not be strings", "Sonar.CodeSmell"),
            new CodeRule("S3994", "URI Parameters should not be strings", "Sonar.CodeSmell"),
            new CodeRule("S3993", "Custom attributes should be marked with \\\"System.AttributeUsageAttribute\\\"", "Sonar.CodeSmell"),
            new CodeRule("S3992", "Assemblies should explicitly specify COM visibility", "Sonar.CodeSmell"),
            new CodeRule("S3990", "Assemblies should be marked as CLS compliant", "Sonar.CodeSmell"),
            new CodeRule("S3956", "\\\"Generic.List\\\" instances should not be part of public APIs", "Sonar.CodeSmell"),
            new CodeRule("S3909", "Collections should implement the generic interface", "Sonar.CodeSmell"),
            new CodeRule("S3908", "Generic event handlers should be used", "Sonar.CodeSmell"),
            new CodeRule("S3906", "Event Handlers should have the correct signature", "Sonar.CodeSmell"),
            new CodeRule("S3902", "\\\"Assembly.GetExecutingAssembly\\\" should not be called", "Sonar.CodeSmell"),
            new CodeRule("S3900", "Arguments of public methods should be validated against null", "Sonar.CodeSmell"),
            new CodeRule("S3898", "Value types should implement \\\"IEquatable<T>\\\"", "Sonar.CodeSmell"),
            new CodeRule("S3880", "Finalizers should not be empty", "Sonar.CodeSmell"),
            new CodeRule("S3431", "\\\"[ExpectedException]\\\" should not be used", "Sonar.CodeSmell"),
            new CodeRule("S3366", "\\\"this\\\" should not be exposed from constructors", "Sonar.CodeSmell"),
            new CodeRule("S3059", "Types should not have members with visibility set higher than the type's visibility", "Sonar.CodeSmell"),
            new CodeRule("S2357", "Fields should be private", "Sonar.CodeSmell"),
            new CodeRule("S2327", "\\\"try\\\" statements with identical \\\"catch\\\" and/or \\\"finally\\\" blocks should be merged", "Sonar.CodeSmell"),
            new CodeRule("S1696", "NullReferenceException should not be caught", "Sonar.CodeSmell"),
            new CodeRule("S138", "Functions should not have too many lines of code", "Sonar.CodeSmell"),
            new CodeRule("S127", "\\\"for\\\" loop stop conditions should be invariant", "Sonar.CodeSmell"),
            new CodeRule("S122", "Statements should be on separate lines", "Sonar.CodeSmell"),
            new CodeRule("S1200", "Classes should not be coupled to too many other classes", "Sonar.CodeSmell"),
            new CodeRule("S1151", "\\\"switch case\\\" clauses should not have too many lines of code", "Sonar.CodeSmell"),
            new CodeRule("S109", "Magic numbers should not be used", "Sonar.CodeSmell"),
            new CodeRule("S106", "Standard outputs should not be used directly to log anything", "Sonar.CodeSmell"),
            new CodeRule("S104", "Files should not have too many lines of code", "Sonar.CodeSmell"),
            new CodeRule("S103", "Lines should not be too long", "Sonar.CodeSmell"),
            new CodeRule("S5167", "HTTP response headers should not be vulnerable to injection attacks", "Sonar.Vulnerability"),
            new CodeRule("S2955", "Generic parameters not constrained to reference types should not be compared to \\\"null\\\"", "Sonar.Bug"),
            new CodeRule("S2674", "The length returned from a stream read should be checked", "Sonar.Bug"),
            new CodeRule("S1226", "Method parameters, caught exceptions and foreach variables' initial values should not be ignored", "Sonar.Bug"),
            new CodeRule("S6585", "Don't hardcode the format when turning dates and times to strings", "Sonar.CodeSmell"),
            new CodeRule("S6513", "\\\"ExcludeFromCodeCoverage\\\" attributes should include a justification", "Sonar.CodeSmell"),
            new CodeRule("S4261", "Methods should be named according to their synchronicities", "Sonar.CodeSmell"),
            new CodeRule("S4226", "Extensions should be in separate namespaces", "Sonar.CodeSmell"),
            new CodeRule("S4225", "Extension methods should not extend \\\"object\\\"", "Sonar.CodeSmell"),
            new CodeRule("S4069", "Operator overloads should have named alternatives", "Sonar.CodeSmell"),
            new CodeRule("S4060", "Non-abstract attributes should be sealed", "Sonar.CodeSmell"),
            new CodeRule("S4058", "Overloads with a \\\"StringComparison\\\" parameter should be used", "Sonar.CodeSmell"),
            new CodeRule("S4056", "Overloads with a \\\"CultureInfo\\\" or an \\\"IFormatProvider\\\" parameter should be used", "Sonar.CodeSmell"),
            new CodeRule("S4052", "Types should not extend outdated base types", "Sonar.CodeSmell"),
            new CodeRule("S4049", "Properties should be preferred", "Sonar.CodeSmell"),
            new CodeRule("S4047", "Generics should be used when appropriate", "Sonar.CodeSmell"),
            new CodeRule("S4041", "Type names should not match namespaces", "Sonar.CodeSmell"),
            new CodeRule("S4040", "Strings should be normalized to uppercase", "Sonar.CodeSmell"),
            new CodeRule("S4027", "Exceptions should provide standard constructors", "Sonar.CodeSmell"),
            new CodeRule("S4026", "Assemblies should be marked with \\\"NeutralResourcesLanguageAttribute\\\"", "Sonar.CodeSmell"),
            new CodeRule("S4023", "Interfaces should not be empty", "Sonar.CodeSmell"),
            new CodeRule("S4022", "Enumerations should have \\\"Int32\\\" storage", "Sonar.CodeSmell"),
            new CodeRule("S4018", "All type parameters should be used in the parameter list to enable type inference", "Sonar.CodeSmell"),
            new CodeRule("S3967", "Multidimensional arrays should not be used", "Sonar.CodeSmell"),
            new CodeRule("S3962", "\\\"static readonly\\\" constants should be \\\"const\\\" instead", "Sonar.CodeSmell"),
            new CodeRule("S3876", "Strings or integral types should be used for indexers", "Sonar.CodeSmell"),
            new CodeRule("S3872", "Parameter names should not duplicate the names of their methods", "Sonar.CodeSmell"),
            new CodeRule("S3717", "Track use of \\\"NotImplementedException\\\"", "Sonar.CodeSmell"),
            new CodeRule("S3532", "Empty \\\"default\\\" clauses should be removed", "Sonar.CodeSmell"),
            new CodeRule("S3441", "Redundant property names should be omitted in anonymous classes", "Sonar.CodeSmell"),
            new CodeRule("S3257", "Declarations and initializations should be as concise as possible", "Sonar.CodeSmell"),
            new CodeRule("S3254", "Default parameter values should not be passed as arguments", "Sonar.CodeSmell"),
            new CodeRule("S3253", "Constructor and destructor declarations should not be redundant", "Sonar.CodeSmell"),
            new CodeRule("S3242", "Method parameters should be declared with base types", "Sonar.CodeSmell"),
            new CodeRule("S3240", "The simplest possible condition syntax should be used", "Sonar.CodeSmell"),
            new CodeRule("S3235", "Redundant parentheses should not be used", "Sonar.CodeSmell"),
            new CodeRule("S3234", "\\\"GC.SuppressFinalize\\\" should not be invoked for types without destructors", "Sonar.CodeSmell"),
            new CodeRule("S3052", "Members should not be initialized to default values", "Sonar.CodeSmell"),
            new CodeRule("S2760", "Sequential tests should not check the same condition", "Sonar.CodeSmell"),
            new CodeRule("S2333", "Redundant modifiers should not be used", "Sonar.CodeSmell"),
            new CodeRule("S2325", "Methods and properties that don't access instance data should be static", "Sonar.CodeSmell"),
            new CodeRule("S2221", "\\\"Exception\\\" should not be caught", "Sonar.CodeSmell"),
            new CodeRule("S2156", "\\\"sealed\\\" classes should not have \\\"protected\\\" members", "Sonar.CodeSmell"),
            new CodeRule("S2148", "Underscores should be used to make large numbers readable", "Sonar.CodeSmell"),
            new CodeRule("S1858", "\\\"ToString()\\\" calls should not be redundant", "Sonar.CodeSmell"),
            new CodeRule("S1698", "\\\"==\\\" should not be used when \\\"Equals\\\" is overridden", "Sonar.CodeSmell"),
            new CodeRule("S1694", "An abstract class should have both abstract and concrete methods", "Sonar.CodeSmell"),
            new CodeRule("S1659", "Multiple variables should not be declared on the same line", "Sonar.CodeSmell"),
            new CodeRule("S1449", "Culture should be specified for \\\"string\\\" operations", "Sonar.CodeSmell"),
            new CodeRule("S1301", "\\\"switch\\\" statements should have at least 3 \\\"case\\\" clauses", "Sonar.CodeSmell"),
            new CodeRule("S1227", "break statements should not be used except for switch cases", "Sonar.CodeSmell"),
            new CodeRule("S1192", "String literals should not be duplicated", "Sonar.CodeSmell"),
            new CodeRule("S113", "Files should end with a newline", "Sonar.CodeSmell"),
            new CodeRule("S1128", "Unnecessary \\\"using\\\" should be removed", "Sonar.CodeSmell"),
            new CodeRule("S1109", "A close curly brace should be located at the beginning of a line", "Sonar.CodeSmell"),
            new CodeRule("S105", "Tabulation characters should not be used", "Sonar.CodeSmell"),
            new CodeRule("S100", "Methods and properties should be named in PascalCase", "Sonar.CodeSmell"),
            new CodeRule("S1309", "Track uses of in-source issue suppressions", "Sonar.CodeSmell"),
            new CodeRule("S1309", "Track uses of in-source issue suppressions", "Sonar.CodeSmell"),
        ];
}